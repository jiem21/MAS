<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;
use App\User;
use App\Employee;
use App\CostCenter;
use App\Canteen;
use App\Allowance;
use App\AllowanceUsage;
use App\AllowanceGenerated;
use App\Logs;

use View;
use Carbon;
use Auth;
use Validator;
use DB;
use Excel;

class ReportController extends Controller
{
	function __construct()
	{
		$this->user = new User;
		$this->emp = new Employee;
		$this->cost = new CostCenter;
		$this->can = new Canteen;
		$this->allowance = new Allowance;
		$this->usage = new AllowanceUsage;
		$this->generatedAll = new AllowanceGenerated;
		$this->logs = new Logs;
	}
	// Navigation
	public function costcenter_rep()
	{
		$data['canteen'] = $this->can->where('status','=',1)->get();
		$data['reviewer'] = $this->user->where('role','=','3')->get();
    	$data['approver'] = $this->user->where('role','=','2')->get();
    	$data['menu_name'] = 'rep_gen';
        $data['meal_list'] = 'cost_center_rep';
        $data['routes'] = route('costcenter_rep');
    	return view('report.costReport',$data);
	}
	public function historical_rep()
	{
    	$data['menu_name'] = 'rep_gen';
        $data['meal_list'] = 'history_rep';
        $data['routes'] = route('historical_rep');
    	return view('report.historyReport',$data);
	}
	public function audit_rep()
	{
		$now = Carbon\Carbon::now();
		$date_from = date("Y-m-d 00:00:00",strtotime($now));
		$date_to = date("Y-m-d 23:59:59",strtotime($now));
		$data['logs'] = $this->logs->whereBetween('activity_date',[$date_from,$date_to])->get();
		$data['menu_name'] = 'rep_gen';
        $data['meal_list'] = 'audit';
        $data['routes'] = route('audit_rep');
        return view('report.auditTrail',$data);
	}
	// Generate Historical Report
	public function gen_historical(Request $req)
	{	
		// Set memory limit and maximum execution time
		ini_set('memory_limit','1024M');
		ini_set('max_execution_time', '360');
		// Date Conversion
		$date_start = date("Y-m-d 00:00:00",strtotime($req->get('date_from'))); 
		$date_end = date("Y-m-d 23:59:59",strtotime($req->get('date_to')));
		$now = date("F d Y h:i:s A",strtotime(Carbon\Carbon::now()));
		// Join query of AllowanceUsage table and canteen table
		$data = $this->usage->select('AllowanceUsage.*','b.new','c.canteenname')
		->whereBetween('TransactionDate',[$date_start,$date_end])->where('UsageType','=','T')
		->join('NewCostCenter as b','AllowanceUsage.CostCenterCode','=','b.old')
		->join('canteen as c',DB::raw("SUBSTRING(ltrim(AllowanceUsage.CreatedBy), 1, 2)"),'=','c.canteencode')
		->get();
		// Excel Generation
		Excel::create('Historical Report', function($excel) use($data,$now,$date_start,$date_end){
			$excel->sheet('History Transaction',function ($sheet) use($data,$now,$date_start,$date_end){
				$sheet->cells('A1:D1', function($cells) {
						$cells->setFontFamily('Tahoma');
						$cells->setAlignment('Center');
						$cells->setValignment('center');
						$cells->setFontWeight('bold');
						$cells->setFontSize(14);
					});
					$sheet->cells('A2:D2', function($cells) {
						$cells->setFontFamily('Tahoma');
						$cells->setAlignment('Center');
						$cells->setValignment('center');
						$cells->setFontWeight('bold');
						$cells->setFontSize(10);
					});
				// Header
				$sheet->mergeCells('A1:H1')->setCellValue('A1','Historical Report ('.date("F d Y",strtotime($date_start)).'-'.date("F d Y",strtotime($date_end)).')');
				$sheet->mergeCells('A2:H2')->setCellValue('A2','Generated By: '.Auth::user()->name);
				$sheet->mergeCells('A3:H3')->setCellValue('A3','Time Generated: '.$now);

				// Columns
				$sheet->row(4,array('Employee No.','Cost Center Code','Canteen Name','Allowance Usage Amount','Allowance Regular Usage Amount','Allowance Overtime Usage Amount','Transaction Date','Ordered Items Description'));
				// Data
				foreach ($data as $key => $datas) {
					$sheet->row(5+$key,array($datas->EmpNo,$datas->new,$datas->canteenname,$datas->AllowanceUsageAmount,$datas->AllowanceAmtRegUsage,$datas->AllowanceAmtOvtUsage,$datas->TransactionDate,$datas->OrderedItemsDescription));
				}

			});
		})->export('xlsx');
	}
	// Generate Cost Center Report
	public function gen_costcenter(Request $req)
	{
		ini_set('max_execution_time', '360');
		if (trim($req->get('can')) == ""||trim($req->get('reviewed_by')) == ""||trim($req->get('approved_by')) == "") {
			return "<script type='text/javascript'>window.close();</script>";
		}
		else{
		$prepared = $this->user->where('id','=',$req->get('prepared_by'))->first();
		$reviewed = $this->user->where('id','=',$req->get('reviewed_by'))->first();
		$approved = $this->user->where('id','=',$req->get('approved_by'))->first();
		$date_start = date("Y-m-d 00:00:00",strtotime($req->get('date_from'))); 
		$date_end = date("Y-m-d 23:59:59",strtotime($req->get('date_to')));
		$file_name = date("F d",strtotime($req->get('date_from')))."-".date("d Y",strtotime($req->get('date_to')));
		if ($req->get('can') == 0) {
			$canteen = $this->can->where('status','=',1)->get();
		}
		else{
			$canteen = $this->can->where('canteencode','=',$req->get('can'))->get();
		}
		Excel::create($file_name, function($excel) use($canteen,$prepared,$reviewed,$approved,$date_start,$date_end){
			foreach ($canteen as $can) {
				$data = $this->usage->select('b.new as costcenter',DB::raw('sum(AllowanceUsage.AllowanceAmtRegUsage) as regular'),DB::raw('sum(AllowanceUsage.AllowanceAmtOvtUsage) as overtime'),DB::raw('(sum(AllowanceUsage.AllowanceAmtRegUsage)+sum(AllowanceUsage.AllowanceAmtOvtUsage)) as total'))->where('CreatedBy','LIKE',$can->canteencode.'%')->whereBetween('TransactionDate',[$date_start,$date_end])->groupBy('b.new')
					->leftjoin('NewCostCenter as b','AllowanceUsage.CostCenterCode','=','b.old')->get();
				$total = $this->usage->select(DB::raw('sum(AllowanceAmtRegUsage) as regular'),DB::raw('sum(AllowanceAmtOvtUsage) as overtime'),DB::raw('(sum(AllowanceAmtRegUsage)+sum(AllowanceAmtOvtUsage)) as total'))->where('CreatedBy','LIKE',$can->canteencode.'%')->whereBetween('TransactionDate',[$date_start,$date_end])->first();
				$excel->sheet($can->canteenname,function ($sheet) use($data,$total,$can,$prepared,$reviewed,$approved,$date_start,$date_end)
				{
					$sheet->cells('A1:D1', function($cells) {
						$cells->setFontFamily('Tahoma');
						$cells->setAlignment('center');
						$cells->setValignment('center');
						$cells->setFontWeight('bold');
						$cells->setFontSize(12);
					});
					$sheet->cells('A2:D2', function($cells) {
						$cells->setFontFamily('Tahoma');
						$cells->setAlignment('center');
						$cells->setValignment('center');
						$cells->setFontWeight('bold');
						$cells->setFontSize(10);
					});
					$sheet->cells('A4:D4', function($cells) {
						$cells->setFontFamily('Calibri');
						$cells->setAlignment('center');
						$cells->setValignment('center');
						$cells->setFontWeight('bold');
						$cells->setFontSize(11);
					});
					$sheet->mergeCells('A1:D1')->setCellValue('A1','Meal Allowance Report');
					$sheet->mergeCells('A2:D2')->setCellValue('A2',$can->canteenname);
					$sheet->mergeCells('A3:D3')->setCellValue('A3','From: '.date('F d Y',strtotime($date_start)).' - '.'To: '.date('F d Y',strtotime($date_end)));
					$sheet->row(4,array('Cost Center','Regular','Overtime','Total'));

					$rows = 5;
					foreach ($data as $key => $info) {
						$sheet->row(5+$key,array($info->costcenter,$info->regular,$info->overtime,$info->total));
						$rows++;
					}
					// Total
					$sheet->cells('A'.$rows.':D'.$rows, function($cells) {
						$cells->setFontFamily('Calibri');
						$cells->setAlignment('Center');
						$cells->setValignment('center');
						$cells->setFontWeight('bold');
						$cells->setFontSize(11);
					});
					$sheet->row($rows,array('Total:',$total->regular,$total->overtime,$total->total));
					// 
					$sheet->row(2+$rows,array('','Prepared By','Checked By','Approved By'));
					$sheet->row(4+$rows,array('',strtoupper($prepared->name),strtoupper($reviewed->name),strtoupper($approved->name)));
					$sheet->row(5+$rows,array('','Signature Over Printed Name','Signature Over Printed Name','Signature Over Printed Name'));
				});
			}
		})->export('xlsx');
		}
	}
	public function gen_audit_trail(Request $req)
	{
		// Set memory limit and maximum execution time
		ini_set('memory_limit','1024M');
		ini_set('max_execution_time', '360');
		// Date Conversion
		$date_start = date("Y-m-d 00:00:00",strtotime($req->get('date_from'))); 
		$date_end = date("Y-m-d 23:59:59",strtotime($req->get('date_to')));
		$now = date("F d Y h:i:s A",strtotime(Carbon\Carbon::now()));
		// Join query of AllowanceUsage table and canteen table
		$data = $this->logs->whereBetween('activity_date',[$date_start,$date_end])->get();
		Excel::create('Audit Trail Report', function($excel) use($data,$now,$date_start,$date_end){
			$excel->sheet('Activity Logs',function ($sheet) use($data,$now,$date_start,$date_end){
				$sheet->cells('A1:D1', function($cells) {
						$cells->setFontFamily('Tahoma');
						$cells->setAlignment('Center');
						$cells->setValignment('center');
						$cells->setFontWeight('bold');
						$cells->setFontSize(14);
					});
					$sheet->cells('A2:D2', function($cells) {
						$cells->setFontFamily('Tahoma');
						$cells->setAlignment('Center');
						$cells->setValignment('center');
						$cells->setFontWeight('bold');
						$cells->setFontSize(10);
					});
					$sheet->cells('A4:D4', function($cells) {
						$cells->setFontFamily('Tahoma');
						$cells->setAlignment('Center');
						$cells->setValignment('center');
						$cells->setFontWeight('bold');
						$cells->setFontSize(10);
					});
				// Header
				$sheet->mergeCells('A1:D1')->setCellValue('A1','Audit Trail Report ('.date("F d Y",strtotime($date_start)).'-'.date("F d Y",strtotime($date_end)).')');
				$sheet->mergeCells('A2:D2')->setCellValue('A2','Generated By: '.Auth::user()->name);
				$sheet->mergeCells('A3:D3')->setCellValue('A3','Time Generated: '.$now);

				// Columns
				$sheet->row(4,array('Name','Activity Logs','Activity Date','IP Address'));
				// Data
				foreach ($data as $key => $datas) {
					$sheet->row(5+$key,array($datas->activity_user,$datas->activity_name,date("F d,Y h:i:s A",strtotime($datas->activity_date)),$datas->ip_address));
				}

			});
		})->export('xlsx');
	}
}
